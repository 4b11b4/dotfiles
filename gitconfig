# 'g<complete>' install via bashrc (eg: gl, gp, gs, gca, gals)
# use "!" to chain


[alias]
# Stage
a = add

# Help
als = "!git config -l | grep alias | cut -c 7-"

# Branch
bl = branch -va
b = checkout 
bn = checkout -b
bdl = branch -d
bdr = push origin --delete

# Commit
c = commit
cm = commit -m
ca = !git add . && git commit -m
mend = commit --amend --no-edit #gets ugly if already pushed

# What's the difference between you and me?
d = diff
dl = !git diff HEAD^.. && git log -2

# Merge
m = merge
ms = merge --squash

# Reset
res = reset --hard
u = reset HEAD
cln = clean -fd

# Status
s = status -s
l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
la = !git log --all --decorate --oneline --graph
v = status -v -v

# Submodule
suir = !git submodule update --init --recursive
ps = !git pull && git suir

# Pull
pl = pull

# Push
p = push
pu = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\""
#end alias



# begin config
[push]
default = simple
# upstream - push the current branch to its upstream branch...
# simple - like upstream, but refuses to push if the upstream branchâ€™s name is different from the local one...
# current - push the current branch to a branch of the same name.
#
# "simple" is the safe method. When pushing, push to the branch
#   only if it already exists and is up to date with the latest commit(?).
##
##  This can cause confusion for beginners:
##    Say you create a new branch.
##    If you create a local branch: 'git checkout -b branchname'
##    Make a commit & push: 'git commit -m "msg" && git push'
###
###     ex. git config push.default simple
###         git push
###
###     ...will fail to push because it doesn't have a previous record
###       of any branches with your new branch name.
####
####      ** TL;DR you need to tell git to push your new branch up to github
####      ** see alias: "gpub"

[credential]
helper = cache --timeout=21600

[user]
email = 4b11b4@gmail.com
name = AB

[diff]
tool = kdiff3
#tool = meld
#tool = p4merge

[difftool]
prompt = false

[difftool "kdiff3"]
#[difftool "meld"]
#[difftool "p4merge"]
cmd = kdiff3 "$LOCAL" "$REMOTE"
#cmd = p4merge "$LOCAL" "$REMOTE"
#cmd = meld "$LOCAL" "$REMOTE"
keepTemporaries = false
trustExitCode = false
keepBackup = false

[merge]
tool = kdiff3 
#tool = meld 
#tool = p4merge 

[mergetool]
prompt = false

[mergetool "kdiff3"]
#[mergetool "p4merge"]
#[mergetool "meld"]
cmd = kdiff3 "$BASE" "$LOCAL" "$REMOTE" -o "$MERGED" --qall
#cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED" #merged in middle 
#cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"   #base in middle 
#cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
keepTemporaries = false
trustExitCode = false
keepBackup = false

# Enforce SSH
[url "ssh://git@github.com/"]
  insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
  insteadOf = https://gitlab.com/
[url "ssh://git@bitbucket.org/"]
  insteadOf = https://bitbucket.org/
#[url "ssh://git@dev.azure.com/"]
#  insteadOf = https://dev.azure.com/
