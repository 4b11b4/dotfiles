[alias]
# List All Alias'
la = "!git config -l | grep alias | cut -c 7-"

# Status
s = status -s
a = !git log --all --decorate --oneline --graph
l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
b = branch -va
v = status -v -v

# Commit
ca = !git add . && git commit -m
u = reset HEAD

# Push
p = push
pub = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\""

# Pull
pl = pull
ps = !git pull && git suir

# Branch
cob = checkout -b

# Submodule
suir = !git submodule update --init --recursive



[push]
default = simple
# upstream - push the current branch to its upstream branch...
# simple - like upstream, but refuses to push if the upstream branchâ€™s name is different from the local one...
# current - push the current branch to a branch of the same name.
#
# "simple" is the safe method. When pushing, push to the branch
#   only if it already exists and is up to date with the latest commit(?).
##
##  This can cause confusion for beginners:
##    Say you create a new branch.
##    If you create a local branch: 'git checkout -b branchname'
##    Make a commit & push: 'git commit -m "msg" && git push'
###
###     ex. git config push.default simple
###         git push
###
###     ...will fail to push because it doesn't have a previous record
###       of any branches with your new branch name.
####
####      ** TL;DR you need to tell git to push your new branch up to github
####      ** see alias: "gpub"

[diff]
tool = meld

[difftool "meld"]
path = /usr/bin/meld

[difftool]
prompt = false

[merge]
tool = meld

[mergetool "meld"]
path = /usr/bin/meld

[mergetool]
prompt = false

[credential]
helper = cache --timeout=21600

[user]
email = 4b11b4@gmail.com
name = AB
